generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  credits       Int              @default(300)
  accounts      Account[]
  chatWithtext  ChatSession[]
  chatWithPDFs  PdfChatSession[]
  posts         Post[]
  sessions      Session[]
}

model ChatSession {
  id        String    @id @default(cuid())
  userId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String?
  User      User?     @relation(fields: [userId], references: [id])
  messages  Message[]
}

model PdfChatSession {
  id        String    @id @default(cuid())
  title     String?
  userId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  User      User?     @relation(fields: [userId], references: [id])
  pdfs      PDF[]     @relation("PDFToPdfChatSession")
}

model PDF {
  id           String           @id @default(cuid())
  name         String
  url          String
  uploadedAt   DateTime         @default(now())
  chatSessions PdfChatSession[] @relation("PDFToPdfChatSession")
}

model Message {
  id               String          @id @default(cuid())
  chatSessionId    String
  content          String
  createdAt        DateTime        @default(now())
  sender           SenderRole
  pdfChatSessionId String?
  chatSession      ChatSession     @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  pdfChatSession   PdfChatSession? @relation(fields: [pdfChatSessionId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SenderRole {
  user
  model
}
